--- a/chrome/browser/extensions/api/developer_private/extension_info_generator.cc
+++ b/chrome/browser/extensions/api/developer_private/extension_info_generator.cc
@@ -575,17 +575,6 @@ void ExtensionInfoGenerator::CreateExten
     info->controlled_info.emplace();
     info->controlled_info->text =
         l10n_util::GetStringUTF8(IDS_EXTENSIONS_INSTALL_LOCATION_ENTERPRISE);
-  } else {
-    // Create Safety Hub information for any non-enterprise extension.
-    developer::SafetyCheckWarningReason warning_reason =
-        ExtensionSafetyCheckUtils::GetSafetyCheckWarningReason(extension,
-                                                               profile);
-    if (warning_reason != developer::SafetyCheckWarningReason::kNone) {
-      info->safety_check_warning_reason = warning_reason;
-      info->safety_check_text =
-          ExtensionSafetyCheckUtils::GetSafetyCheckWarningStrings(
-              warning_reason, state);
-    }
   }
 
   bool is_enabled = state == developer::ExtensionState::kEnabled;
--- a/chrome/browser/extensions/extension_management.cc
+++ b/chrome/browser/extensions/extension_management.cc
@@ -310,31 +310,7 @@ bool ExtensionManagement::IsAllowedManif
     int manifest_version,
     const std::string& extension_id,
     Manifest::Type manifest_type) {
-  bool enabled_by_default =
-      !base::FeatureList::IsEnabled(
-          extensions_features::kExtensionsManifestV3Only) ||
-      manifest_version >= 3;
-
-  // Manifest version policy only supports normal extensions and Chrome OS login
-  // screen extension.
-  if (manifest_type != Manifest::Type::TYPE_EXTENSION &&
-      manifest_type != Manifest::Type::TYPE_LOGIN_SCREEN_EXTENSION) {
-    return enabled_by_default;
-  }
-  switch (global_settings_->manifest_v2_setting) {
-    case internal::GlobalSettings::ManifestV2Setting::kDefault:
-      return enabled_by_default;
-    case internal::GlobalSettings::ManifestV2Setting::kDisabled:
-      return manifest_version >= 3;
-    case internal::GlobalSettings::ManifestV2Setting::kEnabled:
       return true;
-    case internal::GlobalSettings::ManifestV2Setting::kEnabledForForceInstalled:
-      auto installation_mode =
-          GetInstallationMode(extension_id, /*update_url=*/std::string());
-      return manifest_version >= 3 ||
-             installation_mode == INSTALLATION_FORCED ||
-             installation_mode == INSTALLATION_RECOMMENDED;
-  }
 }
 
 bool ExtensionManagement::IsAllowedManifestVersion(const Extension* extension) {
@@ -355,26 +331,8 @@ bool ExtensionManagement::IsExemptFromMV
     return false;
   }
 
-  switch (global_settings_->manifest_v2_setting) {
-    case internal::GlobalSettings::ManifestV2Setting::kDefault:
-      // Default browser behavior. Not exempt.
-      return false;
-    case internal::GlobalSettings::ManifestV2Setting::kDisabled:
-      // All MV2 extensions are disallowed. Not exempt.
-      return false;
-    case internal::GlobalSettings::ManifestV2Setting::kEnabled:
       // All MV2 extensions are allowed. Exempt.
       return true;
-    case internal::GlobalSettings::ManifestV2Setting::kEnabledForForceInstalled:
-      // Force-installed MV2 extensions are allowed. Exempt if it's a force-
-      // installed extension only.
-      auto installation_mode =
-          GetInstallationMode(extension_id, /*update_url=*/std::string());
-      return installation_mode == INSTALLATION_FORCED ||
-             installation_mode == INSTALLATION_RECOMMENDED;
-  }
-
-  return false;
 }
 
 bool ExtensionManagement::IsAllowedByUnpublishedAvailabilityPolicy(
--- a/chrome/browser/extensions/keyed_services/chrome_browser_context_keyed_service_factories.cc
+++ b/chrome/browser/extensions/keyed_services/chrome_browser_context_keyed_service_factories.cc
@@ -19,7 +19,6 @@
 #include "chrome/browser/extensions/extension_web_ui_override_registrar.h"
 #include "chrome/browser/extensions/install_tracker_factory.h"
 #include "chrome/browser/extensions/install_verifier_factory.h"
-#include "chrome/browser/extensions/manifest_v2_experiment_manager.h"
 #include "chrome/browser/extensions/menu_manager_factory.h"
 #include "chrome/browser/extensions/permissions/permissions_updater.h"
 #include "chrome/browser/extensions/plugin_manager.h"
@@ -43,7 +42,6 @@ void EnsureChromeBrowserContextKeyedServ
   extensions::ExtensionWebUIOverrideRegistrar::GetFactoryInstance();
   extensions::InstallTrackerFactory::GetInstance();
   extensions::InstallVerifierFactory::GetInstance();
-  extensions::ManifestV2ExperimentManager::GetFactory();
   extensions::MenuManagerFactory::GetInstance();
   extensions::PermissionsUpdater::EnsureAssociatedFactoryBuilt();
 #if BUILDFLAG(ENABLE_PLUGINS)
--- a/chrome/browser/extensions/manifest_v2_experiment_manager.cc
+++ b/chrome/browser/extensions/manifest_v2_experiment_manager.cc
@@ -144,22 +144,6 @@ bool ManifestV2ExperimentManagerFactory:
 
 // Determines the current stage of the MV2 deprecation experiments.
 MV2ExperimentStage CalculateCurrentExperimentStage() {
-  // Return the "highest" stage that is currently active for the user.
-  if (base::FeatureList::IsEnabled(
-          extensions_features::kExtensionManifestV2Unsupported)) {
-    return MV2ExperimentStage::kUnsupported;
-  }
-
-  if (base::FeatureList::IsEnabled(
-          extensions_features::kExtensionManifestV2Disabled)) {
-    return MV2ExperimentStage::kDisableWithReEnable;
-  }
-
-  if (base::FeatureList::IsEnabled(
-          extensions_features::kExtensionManifestV2DeprecationWarning)) {
-    return MV2ExperimentStage::kWarning;
-  }
-
   return MV2ExperimentStage::kNone;
 }
 
@@ -199,19 +183,7 @@ PrefMap GetGlobalNoticeAcknowledgedPrefF
 // Returns true if legacy extensions should be disabled, looking at both
 // experiment stage and global state.
 bool ShouldDisableLegacyExtensions(MV2ExperimentStage stage) {
-  if (g_allow_mv2_for_testing) {
-    // We allow legacy MV2 extensions for testing purposes.
-    return false;
-  }
-
-  switch (stage) {
-    case MV2ExperimentStage::kNone:
-    case MV2ExperimentStage::kWarning:
       return false;
-    case MV2ExperimentStage::kDisableWithReEnable:
-    case MV2ExperimentStage::kUnsupported:
-      return true;
-  }
 }
 
 // Returns true if the given `stage` is one in which extension enablement should
--- a/chrome/browser/ui/webui/extensions/extensions_ui.cc
+++ b/chrome/browser/ui/webui/extensions/extensions_ui.cc
@@ -462,7 +462,7 @@ content::WebUIDataSource* CreateAndAddEx
       base::FeatureList::IsEnabled(
           extensions_features::kExtensionsMenuAccessControlWithPermittedSites));
   source->AddBoolean("safetyHubShowReviewPanel",
-                     base::FeatureList::IsEnabled(features::kSafetyHub));
+                     false);
 
   // MV2 deprecation.
   auto* mv2_experiment_manager = ManifestV2ExperimentManager::Get(profile);
--- a/extensions/common/extension.cc
+++ b/extensions/common/extension.cc
@@ -95,13 +95,6 @@ bool IsManifestSupported(int manifest_ve
   // Supported versions are always safe.
   if (manifest_version >= kMinimumSupportedManifestVersion &&
       manifest_version <= kMaximumSupportedManifestVersion) {
-    // Emit a warning for unpacked extensions on Manifest V2 warning that
-    // MV2 is deprecated.
-    if (type == Manifest::TYPE_EXTENSION && manifest_version == 2 &&
-        Manifest::IsUnpackedLocation(location) &&
-        !g_silence_deprecated_manifest_version_warnings) {
-      *warning = errors::kManifestV2IsDeprecatedWarning;
-    }
     return true;
   }
 
